#BlueJ class context
comment0.target=Analizador
comment0.text=\r\n\ Clase\ que\ lee\ y\ analiza\ los\ datos\ introducidos\ con\ teclado.\r\n\ \r\n\ @author\ Germ\u00E1n\ Rodr\u00EDguez\ D\u00EDez\r\n\ @version\ 0.1\r\n
comment1.params=
comment1.target=Analizador()
comment1.text=\r\n\ Construye\ un\ analizador\ con\ su\ objeto\ scanner\ para\ leer\ datos\ del\ usuario\r\n
comment10.params=cadena
comment10.target=boolean\ isNumeroEntero(java.lang.String)
comment10.text=\r\n\ Comprueba\ que\ un\ string\ es\ un\ n\u00FAmero\ entero.\r\n\ \r\n\ @param\ \ cadena\ \ El\ string\ a\ analizar\r\n\ @return\ \ \ \ \ Devuelve\ true\ si\ es\ un\ entero,\ y\ false\ si\ no\ lo\ es\r\n
comment11.params=cadena
comment11.target=boolean\ isNumeroPositivo(java.lang.String)
comment11.text=\r\n\ Comprueba\ que\ un\ string\ es\ un\ n\u00FAmero\ positivo,\ mayor\ que\ 0.\r\n\ \r\n\ @param\ \ cadena\ \ El\ string\ a\ analizar,\ debe\ ser\ un\ entero\ confirmado\r\n\ @return\ \ \ \ \ Devuelve\ true\ si\ es\ positivo,\ y\ false\ si\ no\ lo\ es\r\n
comment12.params=cadena
comment12.target=boolean\ isBooleano(java.lang.String)
comment12.text=\r\n\ Comprueba\ que\ un\ string\ es\ "si"\ o\ "no".\r\n\ \r\n\ @param\ \ cadena\ \ El\ string\ a\ analizar,\ debe\ estar\ convertido\ en\ min\u00FAsculas.\r\n\ @return\ \ \ \ \ Devuelve\ true\ si\ es\ una\ respuesta\ v\u00E1lida\ (si,\ no),\ y\ false\ si\ no\ lo\ es.\r\n
comment2.params=texto
comment2.target=java.lang.String\ leerCadenaTexto(java.lang.String)
comment2.text=\r\n\ Muestra\ por\ terminal\ un\ texto\r\n\ enviado\ por\ par\u00E1metro,\ y\ luego\ analiza\ datos\r\n\ introducidos\ para\ devolver\ una\ respuesta.\r\n\ \r\n\ @param\ \ \ \ \ \ texto\ Un\ texto,\ que\ se\ mostrar\u00E1\ por\ terminal\ antes\ de\ la\ lectura\ de\ la\ cadena.\r\n\ @return\ \ \ \ \ Un\ string\ correcto\ para\ el\ sistema,\ que\ servir\u00E1\ de\ respuesta\ al\ texto.\r\n
comment3.params=texto
comment3.target=int\ leerEnteroTexto(java.lang.String)
comment3.text=\r\n\ Muestra\ por\ terminal\ un\ texto\r\n\ enviado\ por\ par\u00E1metro,\ y\ luego\ analiza\ datos\r\n\ introducidos\ para\ devolver\ una\ respuesta.\r\n\ \r\n\ @param\ \ \ \ \ \ texto\ Un\ texto,\ que\ se\ mostrar\u00E1\ por\ terminal\ antes\ de\ la\ lectura\ de\ el\ entero.\r\n\ @return\ \ \ \ \ Un\ entero\ correcto\ para\ el\ sistema,\ que\ servir\u00E1\ de\ respuesta\ al\ texto.\r\n
comment4.params=texto
comment4.target=boolean\ leerBooleanoTexto(java.lang.String)
comment4.text=\r\n\ Muestra\ por\ terminal\ un\ texto\r\n\ enviada\ por\ par\u00E1metro,\ y\ luego\ analiza\ datos\r\n\ introducidos\ para\ devolver\ una\ respuesta.\r\n\ \r\n\ @param\ \ \ \ \ \ texto\ Un\ texto,\ que\ se\ mostrar\u00E1\ por\ terminal\ antes\ de\ la\ lectura\ de\ la\ cadena.\r\n\ @return\ \ \ \ \ Un\ booleano,\ que\ servir\u00E1\ de\ respuesta\ al\ texto.\r\n
comment5.params=limite
comment5.target=int\ leerOpcion(int)
comment5.text=\r\n\ Con\ el\ l\u00EDmite\ como\ m\u00E1ximo\ de\ opciones,\ lee\ una\ opci\u00F3n\ del\ 0\ al\ l\u00EDmite,\r\n\ volviendo\ a\ leer\ un\ entero\ hasta\ que\ se\ introduzca\ uno\ en\ rango\ correcto.\r\n\ \r\n\ @param\ \ \ \ \ \ limite\ Debe\ ser\ mayor\ que\ 0.\ Es\ el\ n\u00FAmero\ de\ opciones\ totales.\r\n\ @return\ \ \ \ \ Un\ entero\ introducido\ por\ el\ usuario,\ menor\ que\ el\ l\u00EDmite,\ y\ que\ no\ es\ negativo.\r\n
comment6.params=
comment6.target=java.lang.String\ leerCadena()
comment6.text=\r\n\ Devuelve\ una\ cadena\ le\u00EDda\ por\ teclado,\ que\ no\ es\ un\ c\u00E1racter\ en\ blanco.\r\n\ \r\n\ @return\ \ \ \ \ Una\ cadena\ ya\ analizada\ introducida\ por\ el\ usuario\ (menos\ de\ 25\ car\u00E1cteres).\r\n
comment7.params=
comment7.target=int\ leerEntero()
comment7.text=\r\n\ Devuelve\ un\ entero\ le\u00EDdo\ de\ un\ String\ por\ teclado,\ positivo.\r\n\ \r\n\ @return\ \ \ \ \ Un\ entero\ ya\ analizado\ introducido\ por\ el\ usuario\ (menos\ de\ 25\ d\u00EDgitos)\r\n
comment8.params=
comment8.target=boolean\ leerBooleano()
comment8.text=\r\n\ Devuelve\ un\ booleano\ le\u00EDdo\ de\ un\ String\ introducido\ por\ teclado.\r\n\ \r\n\ @return\ \ \ \ \ True\ si\ ha\ escrito\ "s\u00ED"\ y\ false\ si\ ha\ escrito\ "no"\r\n
comment9.params=datos
comment9.target=java.lang.String\ analizadorDeCadenas(Analizador.DatosLectura)
comment9.text=\r\n\ Devuelve\ una\ cadena\ analizada,\ con\ longitud\ correcta,\ y\ adaptada\ a\ cada\ tipo\ pedido\ (string,\ entero\ o\ booleano).\r\n\ \r\n\ @param\ datos\ \ El\ tipo\ de\ datos\ al\ que\ se\ quiere\ transformar\ este\ String\ una\ vez\ devuelto.\r\n\ @return\ \ \ \ \ String\ de\ menos\ de\ 25\ caracteres,\ que\ cada\ tipo\ de\ dato\ necesita\ (String\ normal,\ entero\ sin\ espacios,"si"\ o\ "no"\ para\ los\ booleanos)\r\n
numComments=13
